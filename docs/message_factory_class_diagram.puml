@startuml class_diagram

/'  Base unit to represent any data passed through the bus
 '/
class Message {
  - m_topic     : std::string
  - m_value     : int
  + getTopic()  : std::string
  + getValue()  : int
}

/'  Routes messages between publishers and subscribers
    Pattern: Observer + Singleton
 '/
class MessageBus {
  - m_subscribers : std::map<topic, subscribers>
  + subscribe()   : void
  + publish()     : void
}

/'  Represents entity that wants to receive messages
    Implement callback to process messages
 '/
class Subscriber {
  - m_topics      : std::vector<std::string>
  + onMessage()   : void
}

/'  Represents entity that generates messages
    Constructs a Message, and passes it to MessageBus
 '/
class Publisher {
  - m_topics      : std::vector<std::string>
  + publish()     : void
}

/'
class RpmMessage {
  - value_ : int
  + value() : int
}

class MessageFactory <<singleton>> {
  + instance()
  + registerType(name)
  + create(name)
}
'/

@enduml